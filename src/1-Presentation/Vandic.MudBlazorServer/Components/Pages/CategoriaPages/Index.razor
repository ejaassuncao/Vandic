@page "/Category"

@using System.Net.Http.Json
@using Newtonsoft.Json
@using Vandic.Application.Abstracts
@using Vandic.Application.UserCases.Category
@using Vandic.CrossCutting.Resources.Configurations
@using Vandic.MudBlazorServer.Components.Services
@using Vandic.MudBlazorServer.Components.Services.Abstraction
@inject CategoryService CategoryService
@inject ISnackbar Snackbar
@inject ILocalizationService LocationService

<PageTitle>@title</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudCard Outlined="true">
        <MudCardHeader>
            <MudText Typo="Typo.subtitle1" Class="my-2"><strong>@title</strong></MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudDataGrid @ref="dataGrid" T="CategoryDto" ServerData="ServerReload" Filterable="false" Dense="true" Hover="true">
                <ToolBarContent>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch(s))"
                                  Placeholder="@LocationService.GetString(Messages.Procurar)"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" Class="mt-0" />
                    <MudSpacer />
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Class="mt-0" Href="/category/create" />
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="@LocationService.GetString(Messages.Codigo)" />
                    <PropertyColumn Property="x => x.Name" Title="@LocationService.GetString(Messages.Nome)" />
                    <TemplateColumn Hidden="false" CellClass="d-flex justify-end" Context="CategoryDto">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Visibility" Href="/category/visualizar" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Href="/category/editar" />
                            <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => OnDelete(CategoryDto.Item.Id))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="CategoryDto" />
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string title = string.Empty;
    private MudDataGrid<CategoryDto> dataGrid = null!;
    private string? searchString = string.Empty;

    protected override Task OnInitializedAsync()
    {
        title = $"{LocationService.GetString(Messages.Categoria)} - {LocationService.GetString(Messages.Listar)}";

        return base.OnInitializedAsync();
    }


    private async Task<GridData<CategoryDto>> ServerReload(GridState<CategoryDto> state)
    {
        
        var jsonObject = await CategoryService.GetAllAsync(new FilterViewModel<CategoryDto>(searchString, state));

        // IEnumerable<CategoryDto> categoriesResult = new List<CategoryDto>();
        // if (!string.IsNullOrEmpty(jsonObject))
        // {
        //     var settings = new JsonSerializerSettings
        //     {
        //         TypeNameHandling = TypeNameHandling.Auto,
        //         PreserveReferencesHandling = PreserveReferencesHandling.Objects,
        //         Formatting = Formatting.Indented
        //     };
        //     categoriesResult = JsonConvert.DeserializeObject<IEnumerable<CategoryDto>>(jsonObject, settings);
        // }

        // //filtrar dados
        // categoriesResult = categoriesResult.Where(x =>
        // {
        //     if (string.IsNullOrWhiteSpace(searchString))
        //         return true;
        //     if (x.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //         return true;
        //     if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //         return true;
        //     return false;
        // });
        // var totalItems = categoriesResult.Count();

        // //Ordenar dados
        // var sortDefinition = state.SortDefinitions.FirstOrDefault();
        // if (sortDefinition != null)
        // {
        //     switch (sortDefinition.SortBy)
        //     {
        //         case nameof(CategoryDto.Id):
        //             categoriesResult = categoriesResult.OrderByDirection(
        //                 sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
        //                 o => o.Id
        //             );
        //             break;
        //         case nameof(CategoryDto.Name):
        //             categoriesResult = categoriesResult.OrderByDirection(
        //                 sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
        //                 o => o.Name
        //             );
        //             break;
        //     }
        // }
        // var pagedData = categoriesResult.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        return new GridData<CategoryDto>
        {
            TotalItems = jsonObject.TotalItems,
            Items = jsonObject.Items
        };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private async Task OnDelete(Guid id)
    {
        Snackbar.Add($"Guid: {id}", Severity.Info);
    }
}

        