@page "/category"

@using System.Net.Http.Json
@using Newtonsoft.Json
@using Vandic.Domain.Models
@using Vandic.MudBlazorServer.Components.Services
@inject CategoryService _categoryService
@inject ISnackbar Snackbar

<PageTitle>@title</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudCard Outlined="true">
        <MudCardHeader>
            <MudText Typo="Typo.subtitle1" Class="my-2"><strong>@title</strong></MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudDataGrid @ref="dataGrid" T="Category" ServerData="ServerReload" Filterable="false" Dense="true" Hover="true">
                <ToolBarContent>
                    <MudTextField T="string" ValueChanged="@(s => OnSearch(s))"
                                  Placeholder="Pesquisar"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium" Class="mt-0" />
                    <MudSpacer />
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Class="mt-0" Href="/category/create" />
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="Código" />
                    <PropertyColumn Property="x => x.Name" Title="Nome" />
                    <TemplateColumn Hidden="false" CellClass="d-flex justify-end" Context="category">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Visibility" Href="/category/visualizar" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Href="/category/editar" />
                            <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => OnDelete(category.Item.Id))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Category" />
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string title = "Listar Categorias";
    private MudDataGrid<Category> dataGrid = null!;
    private string? searchString = null;

    private async Task<GridData<Category>> ServerReload(GridState<Category> state)
    {
        var jsonObject = await _categoryService.GetAllAsync();

        IEnumerable<Category> categoriesResult = new List<Category>();
        if (!string.IsNullOrEmpty(jsonObject))
        {
            var settings = new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.Auto,
                PreserveReferencesHandling = PreserveReferencesHandling.Objects,
                Formatting = Formatting.Indented
            };
            categoriesResult = JsonConvert.DeserializeObject<IEnumerable<Category>>(jsonObject, settings);
        }

        //filtrar dados
        categoriesResult = categoriesResult.Where(x =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (x.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        });
        var totalItems = categoriesResult.Count();

        //Ordenar dados
        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(Category.Id):
                    categoriesResult = categoriesResult.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Id
                    );
                    break;
                case nameof(Category.Name):
                    categoriesResult = categoriesResult.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Name
                    );
                    break;
            }
        }
        var pagedData = categoriesResult.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        return new GridData<Category>
        {
            TotalItems = totalItems,
            Items = pagedData
        };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private async Task OnDelete(Guid id)
    {
        Snackbar.Add($"Guid: {id}", Severity.Info);
    }
}