// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vandic.Data.efcore.Context;

#nullable disable

namespace Vandic.Data.EfCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Vandic.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("Chave primária");

                    b.Property<int>("AlternativeId")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasColumnName("alternative_id")
                        .HasComment("Auto Incremento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlternativeId"));

                    b.Property<Guid?>("CategoryRootId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_root_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasComment("data de criação do registro (criado em)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("created_by")
                        .HasComment("Nome do Usuario que criou o registro");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at")
                        .HasComment("data da exclusao");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("deleted_by")
                        .HasComment("nome do usuário que excluiu o registro");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at")
                        .HasComment("data da modificação");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("modified_by")
                        .HasComment("Nome do ultimo usuário que modificou registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("NameMenu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_menu");

                    b.HasKey("Id")
                        .HasName("category_id_pk");

                    b.HasIndex(new[] { "CategoryRootId" }, "category_category_root_id_idx");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Vandic.Domain.Models.Category", b =>
                {
                    b.HasOne("Vandic.Domain.Models.Category", "CategoryRoot")
                        .WithMany("InverseCategoryRoot")
                        .HasForeignKey("CategoryRootId")
                        .HasConstraintName("category_category_fk");

                    b.Navigation("CategoryRoot");
                });

            modelBuilder.Entity("Vandic.Domain.Models.Category", b =>
                {
                    b.Navigation("InverseCategoryRoot");
                });
#pragma warning restore 612, 618
        }
    }
}
